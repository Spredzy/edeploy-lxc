#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Gon√©ri Le Bouder <goneri.lebouder@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import yaml
import subprocess
import os
import shutil
import argparse
import libvirt

class Host(object):
    """A Host."""

    def __init__(self, host, conf, idx):
        self.idx = idx + 3
        self.name = host['name']
        self.ipv4 = host['address']
        self.role = host['role']
        self.ssh_key = conf['general']['ssh_key']
        self.domain = conf['network']['domain']
        self.network = conf['network']['bridge']
        self.gateway = conf['network']['gateway']
        self.xml = self._get_domain_xml()

    def _get_domain_xml(self):

        xmlDesc = "<domain type='lxc'>\n" + \
          "  <name>%s</name>\n" % self.name + \
          "  <memory>32768</memory>\n" + \
          "  <os>\n" + \
          "    <type>exe</type>\n" + \
          "    <init>/sbin/init</init>\n" + \
          "  </os>\n" + \
          "  <vcpu>1</vcpu>\n" + \
          "  <clock offset='utc'/>\n" + \
          "  <on_poweroff>destroy</on_poweroff>\n" + \
          "  <on_reboot>restart</on_reboot>\n" + \
          "  <on_crash>destroy</on_crash>\n" + \
          "  <devices>\n" + \
          "    <emulator>/usr/libexec/libvirt_lxc</emulator>\n" + \
          "      <filesystem type='mount'>\n" + \
          "        <source dir='/var/lib/lxc/%s'/>\n" % self.name + \
          "        <target dir='/'/>\n" + \
          "      </filesystem>\n" + \
          "    <interface type='network'>\n" + \
          "      <source network='%s'/>\n" % self.network + \
          "    </interface>\n" + \
          "    <console type='pty' />\n" + \
          "  </devices>\n" + \
          "</domain>"

        return xmlDesc

    def create_filesystem(self):
        subprocess.call(['qemu-img', 'create', '-f', 'qcow2', '-b', "%s/%s.qcow2" % (lxc_dir, self.role), "%s/%s.qcow2" % (lxc_dir, self.name)])
        if not os.path.exists("%s/%s" % (lxc_dir, self.name)):
            print "  * Creating temporary mount point %s/%s..." % (lxc_dir, self.name)
            os.makedirs("%s/%s" % (lxc_dir, self.name))
        subprocess.call(['qemu-nbd', '-c', "/dev/nbd%s" % self.idx, "%s/%s.qcow2" % (lxc_dir, self.name)])
        subprocess.call(['mount', "/dev/nbd%s" % self.idx, "%s/%s" % (lxc_dir, self.name)])

    def remove_filesystem(self):
        subprocess.call(['umount', "%s/%s" % (lxc_dir, self.name)])
        subprocess.call(['qemu-nbd', '-d', "/dev/nbd%s" % self.idx])
        os.remove("%s/%s.qcow2" % (lxc_dir, self.name))
        shutil.rmtree("%s/%s" % (lxc_dir, self.name))

    def setup_ssh_key(self):
        if not self.ssh_key:
            return

        ssh_dir = "%s/%s/root/.ssh/" % (lxc_dir, self.name)
        if not os.path.exists(ssh_dir):
            os.makedirs(ssh_dir)
        print "  * Copying %s to %s/authorized_keys" % (self.ssh_key, ssh_dir)
        shutil.copyfile(self.ssh_key, "%s/authorized_keys" % ssh_dir)

    def _setup_hostname(self):
        hostnameFd = open('%s/%s/etc/hostname' % (lxc_dir, self.name), 'w')
        hostnameFd.write("%s.%s" % (self.name, self.domain))
        hostnameFd.close()

    def _setup_interface(self):
        debian_interfaces = '%s/%s/etc/network/interfaces' % (lxc_dir, self.name)
        netFd = open(debian_interfaces, 'w')
        netFd.write("auto lo\n" +
                    "iface lo inet loopback\n" +
                    "auto eth0\n" +
                    "iface eth0 inet static\n" +
                    "    address %s\n" % self.ipv4 +
                    "    netmask 255.255.255.0\n" +
                    "    gateway %s\n" % self.gateway)
        netFd.close()

    def _setup_host_file(self):
        hostFd = open('%s/%s/etc/hosts' % (lxc_dir, self.name), 'w')
        hostFd.write(
            "127.0.0.1 %s.%s %s localhost\n" % (self.name, self.domain, self.name) +
            "::1     localhost ip6-localhost ip6-loopback\n" +
            "ff02::1 ip6-allnodes\n" +
            "ff02::2 ip6-allrouters\n"
        )
        hostFd.close()

    def setup_network(self):
        self._setup_hostname()
        self._setup_interface()
        self._setup_host_file()

    def start_domain(self, conn):
        domain = conn.defineXML(self.xml)
        domain.create()

    def stop_domain(self, conn):
        domain = conn.lookupByName(self.name)
        domain.destroy()
        domain.undefine()


def stop():
    print "stopping"
    conn = libvirt.open('lxc://')
    hosts = set([Host(host, conf, idx) for idx, host in enumerate(conf['hosts'])])

    for host in hosts:
        host.stop_domain(conn)
        host.remove_filesystem()


def start():
    ''' '''
    conn = libvirt.open('lxc://')
    roles = set([host['role'] for host in conf['hosts']])
    hosts = set([Host(host, conf, idx) for idx, host in enumerate(conf['hosts'])])

    if not os.path.exists(lxc_dir):
        print "Creating directory %s..." % lxc_dir
        os.makedirs(lxc_dir)

    if not os.path.exists(tmp_dir):
        print "Creating directory %s..." % tmp_dir
        os.makedirs(tmp_dir)

    for role in roles:
        print "Creating role %s..." % role
        print "  * Creating empty image"
        subprocess.call(['dd', 'if=/dev/zero', "of=%s/%s.img" % (lxc_dir, role), 'bs=1G', 'count=5'])
        print "  * Formatting (ext4) empty image"
        subprocess.call(['mkfs.ext4', "%s/%s.img" % (lxc_dir, role)])
        if not os.path.exists("%s/%s" % (tmp_dir, role)):
            print "  * Creating temporary mount point %s/tmp-%s..." % (tmp_dir,role)
            os.makedirs("%s/tmp-%s" % (tmp_dir, role))
        print "  * Mounting empty image"
        subprocess.call(['mount', "%s/%s.img" % (lxc_dir, role), "%s/tmp-%s" % (tmp_dir, role)])
        print "  * Copying edeploy content from %s/%s to %s/tmp-%s" % (conf['edeploy']['dir'], role, tmp_dir, role)
        os.system("cp -r %s/%s/* %s/tmp-%s/" % (conf['edeploy']['dir'], role, tmp_dir, role))
        print "  * Unmounting %s/tmp-%s" % (tmp_dir, role)
        subprocess.call(['umount', "%s/tmp-%s" % (tmp_dir, role)])
        print "  * Creating base qcow2 file"
        subprocess.call(['qemu-img', 'convert', '-f', 'raw', '-O', 'qcow2', "%s/%s.img" % (lxc_dir, role), "%s/%s.qcow2" % (lxc_dir, role)])

    for host in hosts:
        print "Building host %s..." % host.name
        print "  * Creating filesystem"
        host.create_filesystem()
        print "  * Configuring ssh"
        host.setup_ssh_key()
        print "  * Configuring network"
        host.setup_network()
        print "  * Starting domain"
        host.start_domain(conn)

parser = argparse.ArgumentParser()
parser.add_argument('action', help='action', choices=['stop', 'start', 'restart'])
parser.add_argument('--config', help='configuration file', required=True)

args = parser.parse_args()

stream = file(args.config, 'r')
conf = yaml.load(stream)
lxc_dir = conf['general']['lxc_dir']
tmp_dir = conf['general']['tmp_dir']


if args.action == 'start':
    start()
elif args.action == 'stop':
    stop()
elif args.action == 'restart':
    stop()
    start()
