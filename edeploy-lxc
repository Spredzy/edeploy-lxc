#!/usr/bin/python
# -*- coding: utf-8 -*- 
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Gon√©ri Le Bouder <goneri.lebouder@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import glob
import augeas
import yaml
from pprint import pprint
import subprocess
import os
import sys
import shutil

stream = file('config.yaml', 'r')
conf=yaml.load(stream)


def stop():
    print "stopping"
    for host in conf['hosts']:
    
        aufs_rw_dir = "/tmp/base_aufs/%s" % host['name']
        lxc_dir = "/var/lib/lxc/%s" % host['name']
        subprocess.call(['lxc-stop', '-n', host['name'] ])
    
        if os.path.exists(lxc_dir):
            print("[%s]" % host['name'])
            try:
                subprocess.call(['umount', lxc_dir ])
            except:
                print("Failed to umount %s" % lxc_dir)
            shutil.rmtree(lxc_dir)

            if os.path.exists(aufs_rw_dir):
                shutil.rmtree(aufs_rw_dir)

def start():

    my_env = os.environ
    my_env["SUITE"] = "wheezy"
    
    subprocess.call(['lxc-create', '-t', 'debian', '-n', 'basesys'], env=my_env)
    subprocess.call(['rsync', '-av', '%s/' % conf['edeploy']['dir'], '/var/lib/lxc/basesys/rootfs'])
    
    # work around for LXC bug
    os.unlink("/var/lib/lxc/basesys/rootfs/sbin/rmmod")
    
    for host in conf['hosts']:
        print("[%s]" % host['name'])

        aufs_rw_dir = "/tmp/base_aufs/%s" % host['name']
        lxc_dir = "/var/lib/lxc/%s" % host['name']
        subprocess.call(['lxc-stop', '-n', host['name'] ])

        os.makedirs(lxc_dir)
        os.makedirs(aufs_rw_dir)
    
        subprocess.call(['mount', '-t', 'aufs', '-o', 'br=%s:%s' % (aufs_rw_dir, '/var/lib/lxc/basesys'), 'none', lxc_dir ])
    
    
        lxcConfFd = open('/var/lib/lxc/%s/config' % host['name'], 'w')
        lxcConfFd.write("lxc.network.type = veth\n" +
            "lxc.network.flags = up\n" +
            "lxc.network.link = %s\n" % conf['network']['bridge'] +
            "lxc.rootfs = /var/lib/lxc/%s/rootfs\n" % host['name'] +
            "lxc.tty = 4\n" +
            "lxc.pts = 1024\n" +
            "lxc.utsname = %s\n" % host['name'] +
            "lxc.cgroup.devices.deny = a\n" +
            "lxc.cgroup.devices.allow = c 1:3 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:5 rwm\n" +
            "lxc.cgroup.devices.allow = c 5:1 rwm\n" +
            "lxc.cgroup.devices.allow = c 5:0 rwm\n" +
            "lxc.cgroup.devices.allow = c 4:0 rwm\n" +
            "lxc.cgroup.devices.allow = c 4:1 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:9 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:8 rwm\n" +
            "lxc.cgroup.devices.allow = c 136:* rwm\n" +
            "lxc.cgroup.devices.allow = c 5:2 rwm\n" +
            "lxc.cgroup.devices.allow = c 254:0 rwm\n" +
            "lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0\n" +
            "lxc.mount.entry = sysfs sys sysfs defaults  0 0\n")
        lxcConfFd.close()
    
    
        netFd = open('/var/lib/lxc/%s/rootfs/etc/network/interfaces' % host['name'], 'w')
        netFd.write("auto lo\n" +
            "iface lo inet loopback\n" +
            "auto eth0\n" +
            "iface eth0 inet static\n" +
            "    address %s\n" % host['address'] +
            "    netmask 255.255.255.0\n" +
            "    gateway %s\n" % conf['network']['gateway'])
        netFd.close()
    
        hostFd = open('/var/lib/lxc/%s/rootfs/etc/hosts' % host['name'], 'w')
        hostFd.write(
            "127.0.0.1 %s.%s %s localhost\n" % (host['name'], host['name'], conf['network']['domain']) +
            "::1     localhost ip6-localhost ip6-loopback\n" +
            "ff02::1 ip6-allnodes\n" +
            "ff02::2 ip6-allrouters\n"
        )
        for h in conf['hosts']:
            hostFd.write("%s %s %s.%s\n" % (h['address'], h['name'], h['name'], conf['network']['domain']))
        
        hostFd.close()
       
        a = augeas.Augeas(root="/var/lib/lxc/%s/rootfs" % host['name'])
        a.set("/files/etc/hostname/hostname", host['name'])
        a.set("/files/etc/default/puppet/START", "yes")
        a.set("/files/etc/puppet/puppet.conf/main/server", conf['network']['puppet_host'])
        a.save()

        if host['name'] == conf['network']['puppet_host']:
            print("    coping Puppet configuration")
            subprocess.call(['rsync', '-a', '%s/' % conf['network']['puppet_cfg_dir'], "/var/lib/lxc/%s/rootfs/etc/puppet" % host['name']])
            fd = open('/var/lib/lxc/%s/rootfs/etc/puppet/autosign.conf' % host['name'], 'w')
            fd.write("*.%s\n" % conf['network']['domain'])
            fd.close()

    
        print("    launching")
        subprocess.call(['lxc-start', '--daemon', '--console-log', '/tmp/lxc-%s.log' % host['name'], '-n', host['name'] ])

def usage():
    print "Usage: %s (stop|start)" % sys.argv[0]

if len(sys.argv) > 1:
    if sys.argv[1] == 'start':
        start()
    elif sys.argv[1] == 'stop':
        stop()
else:
    usage()

